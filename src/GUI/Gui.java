/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import archivador.Archivo;
import archivador.FileSystem;
import archivador.Folder;
import archivador.Registro;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author usuario
 */
public class Gui extends javax.swing.JFrame {

  FileSystem coso;
  Registro selected, seleccionado = null;
  boolean NadaSelected = true;
  boolean copiando = false, moviendo = false;

  /**
   * Creates new form Gui
   */
  public Gui(FileSystem este) {

    this.coso = este;
    initComponents();
    this.clipboard.setText("");
    actualizarCosos();
    BCopyVR.setEnabled(false);
    BCopyVV.setEnabled(false);
    BMover.setEnabled(false);

    this.setLocationRelativeTo(null);
    this.getContentPane().setBackground(Color.decode("#121212"));

    lista.setCellRenderer(new ListCellRenderer());

    this.lista.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {

          // Double-click detected
          int index = list.locationToIndex(evt.getPoint());

          if (coso.Actual.listaCosos.get(index) instanceof Folder) {
            coso.Actual = (Folder) coso.Actual.listaCosos.get(index);
            actualizarCosos();
          } else {
            Registro leer = coso.Actual.listaCosos.get(index);
            String contenido = "";
            try {
              contenido = coso.verFile((Archivo) leer);
            } catch (IOException ex) {
              Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, contenido, leer.nombre, JOptionPane.INFORMATION_MESSAGE);
          }
        }

      }
    }
    );

    Gui gui = this;
    this.lista.addListSelectionListener(new ListSelectionListener() {

      public void valueChanged(ListSelectionEvent arg0) {

        if (!arg0.getValueIsAdjusting()) {
          int a = lista.getSelectedIndex();
          if (a != -1 && a <= coso.Actual.listaCosos.size()) {
            selected = coso.Actual.listaCosos.get(a);

            BCopyVR.setEnabled(true);
            BCopyVV.setEnabled(true);
            BMover.setEnabled(true);
            //ButtonMover.setText("Quitar selecciÃ³n");
          } else {
            // selected = null;

            BCopyVR.setEnabled(false);
            if (!copiando) {
              BCopyVV.setEnabled(false);
            }
            if (!moviendo) {
              BMover.setEnabled(false);
            }

          }

        }
        //gui.actualizarCosos();
      }
    });

  }

  public void actualizarCosos() {
    LabelPathW.setText(this.coso.Actual.path);
    DefaultListModel modelo = new DefaultListModel();
    for (int i = 0; i < this.coso.Actual.listaCosos.size(); i++) {
      String tipo = (this.coso.Actual.listaCosos.get(i) instanceof Folder) ? "D" : "A";
      modelo.addElement(tipo + this.coso.Actual.listaCosos.get(i).nombre);
    }
    lista.setModel(modelo);
    /*
    if (NadaSelected == false) {
      //selected = null;
      NadaSelected = true;
      BCopyVR.setEnabled(false);
      if (!copiando) {
        BCopyVV.setEnabled(false);
      }
      if (!moviendo) {
        BMover.setEnabled(false);
      }
      ButtonMover.setText("Seleccionar");
    }
     */
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    ButtonAnalize1 = new javax.swing.JButton();
    LabelPathW = new javax.swing.JLabel();
    jButton1 = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    lista = new javax.swing.JList<>();
    jButton2 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    jButton4 = new javax.swing.JButton();
    jButton5 = new javax.swing.JButton();
    BMover = new javax.swing.JButton();
    BCopyVV = new javax.swing.JButton();
    limpiar = new javax.swing.JButton();
    BCopyVR = new javax.swing.JButton();
    BModificar = new javax.swing.JButton();
    jButton6 = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    LabelPath = new javax.swing.JLabel();
    clipboard = new javax.swing.JLabel();
    jButton9 = new javax.swing.JButton();

    ButtonAnalize1.setBackground(Color.decode("#4ecca3"));
    ButtonAnalize1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
    ButtonAnalize1.setText("Analizar");
    ButtonAnalize1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ButtonAnalize1ActionPerformed(evt);
      }
    });

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    LabelPathW.setBackground(new java.awt.Color(255, 255, 255));
    LabelPathW.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
    LabelPathW.setForeground(new java.awt.Color(255, 255, 255));
    LabelPathW.setText("Portapapeles:");
    getContentPane().add(LabelPathW, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 100, 30));

    jButton1.setBackground(Color.decode("#4ecca3"));
    jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/return.png"))); // NOI18N
    jButton1.setToolTipText("");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 50, 30));

    lista.setBackground(Color.decode("#433d3c"));
    lista.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    lista.setForeground(new java.awt.Color(255, 255, 255));
    jScrollPane1.setViewportView(lista);

    getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 700, 230));

    jButton2.setBackground(Color.decode("#4ecca3"));
    jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/next.png"))); // NOI18N
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 30, 30, 20));

    jButton3.setBackground(Color.decode("#c4fb6d"));
    jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/newDir.png"))); // NOI18N
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 50, 40));

    jButton4.setBackground(Color.decode("#c4fb6d"));
    jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/newFile.png"))); // NOI18N
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 50, 40));

    jButton5.setBackground(Color.decode("#d54062"));
    jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/borrador.png"))); // NOI18N
    jButton5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton5ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 410, 50, 40));

    BMover.setBackground(Color.decode("#4ecca3"));
    BMover.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    BMover.setForeground(new java.awt.Color(0, 0, 0));
    BMover.setText("Mover");
    BMover.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        BMoverActionPerformed(evt);
      }
    });
    getContentPane().add(BMover, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 470, 110, 40));

    BCopyVV.setBackground(Color.decode("#4ecca3"));
    BCopyVV.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    BCopyVV.setForeground(new java.awt.Color(0, 0, 0));
    BCopyVV.setText("Copiar");
    BCopyVV.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        BCopyVVActionPerformed(evt);
      }
    });
    getContentPane().add(BCopyVV, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 110, 40));

    limpiar.setBackground(Color.decode("#4ecca3"));
    limpiar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    limpiar.setForeground(new java.awt.Color(0, 0, 0));
    limpiar.setText("Limpiar");
    limpiar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        limpiarActionPerformed(evt);
      }
    });
    getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 540, 80, -1));

    BCopyVR.setBackground(Color.decode("#4ecca3"));
    BCopyVR.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    BCopyVR.setForeground(new java.awt.Color(0, 0, 0));
    BCopyVR.setText("Exportar");
    BCopyVR.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        BCopyVRActionPerformed(evt);
      }
    });
    getContentPane().add(BCopyVR, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 470, 110, 40));

    BModificar.setBackground(Color.decode("#4ecca3"));
    BModificar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    BModificar.setForeground(new java.awt.Color(0, 0, 0));
    BModificar.setText("Modificar");
    BModificar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        BModificarActionPerformed(evt);
      }
    });
    getContentPane().add(BModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 420, 80, 30));

    jButton6.setText("Buscar");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton6ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 110, -1, 30));

    jLabel2.setBackground(Color.decode("#4ecca3"));
    jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jLabel2.setForeground(Color.decode("#29c7ac"));
    getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 560, 50, 50));

    jLabel3.setBackground(new java.awt.Color(255, 255, 255));
    jLabel3.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
    jLabel3.setForeground(Color.decode("#29c7ac"));
    jLabel3.setText("MI File System");
    getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

    LabelPath.setBackground(new java.awt.Color(255, 255, 255));
    LabelPath.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
    LabelPath.setForeground(new java.awt.Color(255, 255, 255));
    LabelPath.setText("Portapapeles:");
    getContentPane().add(LabelPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 510, 110, 30));

    clipboard.setBackground(new java.awt.Color(255, 255, 255));
    clipboard.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
    clipboard.setForeground(new java.awt.Color(255, 255, 255));
    clipboard.setText("path");
    getContentPane().add(clipboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 510, 120, 30));

    jButton9.setBackground(Color.decode("#4ecca3"));
    jButton9.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    jButton9.setForeground(new java.awt.Color(0, 0, 0));
    jButton9.setText("Importar");
    jButton9.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton9ActionPerformed(evt);
      }
    });
    getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 410, 110, 40));

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      // TODO add your handling code here:
      if (coso.Actual.padre != null) {
        coso.Actual = coso.Actual.padre;
        actualizarCosos();
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      // TODO add your handling code here:
      int a = lista.getSelectedIndex();
      if (a != -1 && a <= coso.Actual.listaCosos.size()) {
        if (coso.Actual.listaCosos.get(a) instanceof Folder) {
          coso.Actual = (Folder) coso.Actual.listaCosos.get(a);
          actualizarCosos();
        }
      }
    }//GEN-LAST:event_jButton2ActionPerformed

  public void ventanaXD() {
    JFrame jf = new JFrame("xd");
    jf.setLocationRelativeTo(null);
    jf.setLayout(null);

  }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      // TODO add your handling code here:
      String name = JOptionPane.showInputDialog(this, "Indique el nombre del directorio", "Nombre del Directorio", JOptionPane.QUESTION_MESSAGE);
      if (name == null) {
        return;
      }
      // BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

      //String name = reader.readLine();
      coso.createDir(name);
      actualizarCosos();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      // TODO add your handling code here:
      int a = lista.getSelectedIndex();
      if (a != -1 && a <= coso.Actual.listaCosos.size()) {
        Registro elim = coso.Actual.listaCosos.get(a);
        System.out.println(((Archivo) elim).sectorInicial);
        coso.ReMove(elim);
        actualizarCosos();
      }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      // TODO add your handling code here:
      String name = JOptionPane.showInputDialog(this, "Indique el nombre del archivo", "Nombre del Archivo", JOptionPane.QUESTION_MESSAGE);
      if (name == null) {
        return;
      }
      System.out.println("Indique el contenido del archivo:");

      String contenido = JOptionPane.showInputDialog(this, "Indique el contenido del archivo", "Contenido del Archivo", JOptionPane.QUESTION_MESSAGE);
      if (contenido == null) {
        contenido = "";
      }
      int tamannoArchivo = contenido.length();
      try {
        coso.createFile(name, tamannoArchivo, contenido);
      } catch (IOException ex) {
        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
      }
      actualizarCosos();

    }//GEN-LAST:event_jButton4ActionPerformed

    private void BMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMoverActionPerformed
      // TODO add your handling code here:
      if (moviendo) {

        Folder NuevoDir = coso.Actual;
        //Lo agrega al nuevo folder
        NuevoDir.listaCosos.add(seleccionado);
        //Se elimina del folder anterior
        seleccionado.padre.listaCosos.remove(seleccionado);
        //Se le vincula el nuevo padre
        seleccionado.padre = NuevoDir;

        seleccionado.cambiarPath();

        moviendo = false;
        this.BMover.setText("Mover");
        this.BMover.setEnabled(false);
        this.clipboard.setText("");
      } else {
        moviendo = true;
        seleccionado = selected;
        this.clipboard.setText(selected.path);
        this.BMover.setText("Mover AquÃ­");
        this.limpiar.setEnabled(true);
      }
      actualizarCosos();
    }//GEN-LAST:event_BMoverActionPerformed

    private void BCopyVVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCopyVVActionPerformed
      // TODO add your handling code here:
      if (copiando) {
        Folder destino = coso.Actual;

        System.out.println(destino.getSectores(coso));
        System.out.println(coso.verificarSectores());

        // VALIDARRRR
        if (seleccionado.getSectores(coso) > coso.verificarSectores()) {
          JOptionPane.showMessageDialog(null, "No hay espacio suficiente en el disco para realizar el copiado", "Memoria Llena", JOptionPane.INFORMATION_MESSAGE);
          return;
        }
        destino.agregar(seleccionado, coso);
        /*
          try {
            Registro copiar = (Registro) selected.clone();
            //Lo agrega al nuevo folder
            NuevoDir.listaCosos.add(copiar);
            //Se le vincula el nuevo padre
            copiar.padre = NuevoDir;
            copiar.cambiarPath();

          } catch (CloneNotSupportedException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
          }
         */

        // COPU
      } else {
        copiando = true;
        seleccionado = selected;
        this.clipboard.setText(selected.path);
        this.BCopyVV.setText("Pegar");
        this.limpiar.setEnabled(true);
      }

      actualizarCosos();
    }//GEN-LAST:event_BCopyVVActionPerformed

    private void BModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BModificarActionPerformed
      int a = lista.getSelectedIndex();
      if (a != -1 && a <= coso.Actual.listaCosos.size()) {
        Registro archivo = coso.Actual.listaCosos.get(a);
        try {
          BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
          System.out.println("Indique el nuevo texto del archivo:");
          String contenido = reader.readLine();
          coso.modFILE((Archivo) archivo, contenido);

        } catch (IOException ex) {
          Logger.getLogger(Gui.class
            .getName()).log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_BModificarActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      // TODO add your handling code here:
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      try {
        String name = reader.readLine();
        ArrayList<Registro> encontrados = coso.buscar(name);
        for (Registro r : encontrados) {
          System.out.println(r.nombre);

        }
      } catch (IOException ex) {
        Logger.getLogger(Gui.class
          .getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_jButton6ActionPerformed

  private void ButtonAnalize1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAnalize1ActionPerformed

  }//GEN-LAST:event_ButtonAnalize1ActionPerformed

  private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed

    if (moviendo) {
      moviendo = false;
      this.BMover.setText("Mover");
      this.BMover.setEnabled(false);
      this.clipboard.setText("");
      this.limpiar.setEnabled(false);
    }
    if (copiando) {
      copiando = false;
      this.BCopyVV.setText("Copiar");
      this.BCopyVV.setEnabled(false);
      this.clipboard.setText("");
      this.limpiar.setEnabled(false);
    }
    actualizarCosos();

  }//GEN-LAST:event_limpiarActionPerformed

  private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
    // IMPPORTAR
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    int returnVal = chooser.showOpenDialog(null);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File f = chooser.getSelectedFile();
      try {
        System.out.println("OJO:" + coso.getSectoresImportar(f));

        if (coso.getSectoresImportar(f) > coso.verificarSectores()) {
          JOptionPane.showMessageDialog(null, "No hay espacio suficiente en el disco para realizar el copiado", "Memoria Llena", JOptionPane.INFORMATION_MESSAGE);
          return;
        }

        coso.importar(f);

      } catch (IOException ex) {
        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    this.actualizarCosos();
  }//GEN-LAST:event_jButton9ActionPerformed

  private void BCopyVRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCopyVRActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int returnVal = chooser.showOpenDialog(null);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File f = chooser.getSelectedFile();
      try {
        coso.exportar(f, selected);
      } catch (IOException ex) {
        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
      }
    }

    this.actualizarCosos();


  }//GEN-LAST:event_BCopyVRActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) throws FileNotFoundException {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;

        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(Gui.class
        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(Gui.class
        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(Gui.class
        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Gui.class
        .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    FileSystem este = new FileSystem(3, 5);
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new Gui(este).setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton BCopyVR;
  private javax.swing.JButton BCopyVV;
  private javax.swing.JButton BModificar;
  private javax.swing.JButton BMover;
  private javax.swing.JButton ButtonAnalize1;
  private javax.swing.JLabel LabelPath;
  private javax.swing.JLabel LabelPathW;
  private javax.swing.JLabel clipboard;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton4;
  private javax.swing.JButton jButton5;
  private javax.swing.JButton jButton6;
  private javax.swing.JButton jButton9;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton limpiar;
  private javax.swing.JList<String> lista;
  // End of variables declaration//GEN-END:variables
}
